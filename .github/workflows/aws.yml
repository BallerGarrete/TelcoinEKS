name: Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-1
  EKS_CLUSTER_NAME: cluster-telcoin
  DOCKER_IMAGE_TAG: latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the source code from GitHub
      - name: Checkout
        uses: actions/checkout@v2

      # Install and configure the AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-cli@v1
        with:
          region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::188527884040:role/GitHubOIDC

      # Authenticate with the EKS cluster
#       - name: Authenticate with EKS
#         id: eks
#         uses: aws-actions/amazon-eks-auth@v1
#         with:
#           region: ${{ env.AWS_REGION }}
#           cluster-name: ${{ env.EKS_CLUSTER_NAME }}
          
#       - name: Configure AWS credentials and EKS cluster
#         run: |
#           aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws eks update-kubeconfig --name <your-eks-cluster-name> --region <your-aws-region>
          
      - name: Configure AWS credentials and EKS cluster
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws eks update-kubeconfig --name <env.EKS_CLUSTER_NAME> --region <env.AWS_REGION>

      # Build the Docker image
      - name: Build Docker image
        run: docker build -t my-docker-image:${{ env.DOCKER_IMAGE_TAG }} .

      # Tag the Docker image
      - name: Tag Docker image
        run: docker tag my-docker-image:${{ env.DOCKER_IMAGE_TAG }} ${{ steps.eks.outputs.registry }}/${{ env.EKS_CLUSTER_NAME }}/my-docker-image:${{ env.DOCKER_IMAGE_TAG }}

      # Push the Docker image to the ECR repository
      - name: Push Docker image
        run: |
          $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION }})
          docker push ${{ steps.eks.outputs.registry }}/${{ env.EKS_CLUSTER_NAME }}/my-docker-image:${{ env.DOCKER_IMAGE_TAG }}

      # Apply the Kubernetes manifest files to the EKS cluster
      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}
